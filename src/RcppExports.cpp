// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// approximate_rational_fractions_cpp
DataFrame approximate_rational_fractions_cpp(NumericVector x, const double uncertainty, const double deviation);
RcppExport SEXP _wavyr_approximate_rational_fractions_cpp(SEXP xSEXP, SEXP uncertaintySEXP, SEXP deviationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type uncertainty(uncertaintySEXP);
    Rcpp::traits::input_parameter< const double >::type deviation(deviationSEXP);
    rcpp_result_gen = Rcpp::wrap(approximate_rational_fractions_cpp(x, uncertainty, deviation));
    return rcpp_result_gen;
END_RCPP
}
// combine_spectra_cpp
List combine_spectra_cpp(NumericVector component, NumericVector amplitude, const double tolerance);
RcppExport SEXP _wavyr_combine_spectra_cpp(SEXP componentSEXP, SEXP amplitudeSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type component(componentSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type amplitude(amplitudeSEXP);
    Rcpp::traits::input_parameter< const double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(combine_spectra_cpp(component, amplitude, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// compute_beats_cpp
DataFrame compute_beats_cpp(NumericVector wavelength, NumericVector amplitude, double tolerance);
RcppExport SEXP _wavyr_compute_beats_cpp(SEXP wavelengthSEXP, SEXP amplitudeSEXP, SEXP toleranceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type wavelength(wavelengthSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type amplitude(amplitudeSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_beats_cpp(wavelength, amplitude, tolerance));
    return rcpp_result_gen;
END_RCPP
}
// stern_brocot_cpp
DataFrame stern_brocot_cpp(const double x, const double uncertainty);
RcppExport SEXP _wavyr_stern_brocot_cpp(SEXP xSEXP, SEXP uncertaintySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type uncertainty(uncertaintySEXP);
    rcpp_result_gen = Rcpp::wrap(stern_brocot_cpp(x, uncertainty));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wavyr_approximate_rational_fractions_cpp", (DL_FUNC) &_wavyr_approximate_rational_fractions_cpp, 3},
    {"_wavyr_combine_spectra_cpp", (DL_FUNC) &_wavyr_combine_spectra_cpp, 3},
    {"_wavyr_compute_beats_cpp", (DL_FUNC) &_wavyr_compute_beats_cpp, 3},
    {"_wavyr_stern_brocot_cpp", (DL_FUNC) &_wavyr_stern_brocot_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_wavyr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
